{
  "name": "Update Notifier+",
  "author": "Cobalt Official",
  "description": "Adds red circle next to mods that need updates by comparing local code to GitHub. Auto-checks every minute.",
  "code": "(function () {\n  const CHECK_INTERVAL_MINUTES = 1;\n  const STORAGE_KEY = 'updateNotifierSettings';\n\n  const defaultSettings = {\n    autoCheck: true,\n    lastCheck: 0\n  };\n\n  function getSettings() {\n    const stored = localStorage.getItem(STORAGE_KEY);\n    return stored ? JSON.parse(stored) : defaultSettings;\n  }\n\n  function saveSettings(settings) {\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(settings));\n  }\n\n  function needsUpdate(localCode, remoteCode) {\n    return localCode.trim() !== remoteCode.trim();\n  }\n\n  async function fetchRemoteCode(mod) {\n    const githubURL = mod.githubURL || mod.meta?.githubURL;\n    if (!githubURL) return null;\n\n    const rawURL = githubURL\n      .replace('github.com', 'raw.githubusercontent.com')\n      .replace('/blob/', '/');\n\n    try {\n      const res = await fetch(rawURL);\n      return await res.text();\n    } catch (err) {\n      console.warn(`Failed to fetch remote code for ${mod.name}`, err);\n      return null;\n    }\n  }\n\n  function markModAsOutdated(modName) {\n    const modElement = document.querySelector(`[data-mod-name=\"${modName}\"]`);\n    if (modElement && !modElement.querySelector('.update-badge')) {\n      const badge = document.createElement('span');\n      badge.className = 'update-badge';\n      badge.textContent = 'ðŸ”´';\n      modElement.appendChild(badge);\n    }\n  }\n\n  async function checkAllMods() {\n    const mods = window.cobalt?.mods?.getAll?.() || [];\n    for (const mod of mods) {\n      const localCode = mod.code;\n      const remoteCode = await fetchRemoteCode(mod);\n      if (remoteCode && needsUpdate(localCode, remoteCode)) {\n        markModAsOutdated(mod.name);\n      }\n    }\n    const settings = getSettings();\n    settings.lastCheck = Date.now();\n    saveSettings(settings);\n  }\n\n  function createSettingsPanel() {\n    const panel = document.createElement('div');\n    panel.className = 'update-settings-panel';\n    panel.innerHTML = `\n      <h3>ðŸ”§ UpdateNotifier+ Settings</h3>\n      <label>\n        <input type=\"checkbox\" id=\"autoCheckToggle\" />\n        Enable Auto-Check (Every Minute)\n      </label>\n    `;\n    document.body.appendChild(panel);\n\n    const toggle = document.getElementById('autoCheckToggle');\n    const settings = getSettings();\n    toggle.checked = settings.autoCheck;\n\n    toggle.addEventListener('change', () => {\n      settings.autoCheck = toggle.checked;\n      saveSettings(settings);\n    });\n  }\n\n  function shouldRunAutoCheck() {\n    const settings = getSettings();\n    const now = Date.now();\n    const elapsed = now - settings.lastCheck;\n    return settings.autoCheck && elapsed > CHECK_INTERVAL_MINUTES * 60 * 1000;\n  }\n\n  function init() {\n    const style = document.createElement('style');\n    style.textContent = `\n      .update-badge {\n        margin-left: 8px;\n        font-size: 1.2em;\n        color: red;\n      }\n      .update-settings-panel {\n        position: fixed;\n        bottom: 20px;\n        right: 20px;\n        background: #222;\n        color: #fff;\n        padding: 12px;\n        border-radius: 8px;\n        box-shadow: 0 0 10px #000;\n        z-index: 9999;\n      }\n    `;\n    document.head.appendChild(style);\n\n    createSettingsPanel();\n\n    if (shouldRunAutoCheck()) {\n      checkAllMods();\n    }\n\n    setInterval(() => {\n      if (getSettings().autoCheck) {\n        checkAllMods();\n      }\n    }, CHECK_INTERVAL_MINUTES * 60 * 1000);\n  }\n\n  init();\n})();"
}
